library(data.table)
epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main_v1.7.3.csv", data.table = FALSE)
setwd("/Volumes/blainey_lab/Mo/projects/epigenetic_screens/github/iPS_CRISPRi_Screens/")
epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main_v1.7.3.csv", data.table = FALSE)
epifactors_main
dim(epifactors_main)
dim(epifactors_main)
colnames(epifactors_main)
rownames(epifactors_main) <- epifactors_main$HGNC_symbol
epifactors_main
dolcetto <- fread(file = "./epifactors_sgRNA_library/broadgpp-dolcetto-targets-seta.txt", data.table = FALSE)
hCRISPRi <- fread(file = "./epifactors_sgRNA_library/hCRISPRiv2.1_libraries.tsv", data.table = FALSE)
dolcetto
constant5 <- "AAGCAGTGGTATCAACGCAGAGTcgtctcgcacc"
constant3 <- "gtttagagacgCCTTTGGGTAAGCACACGTC"
dmatches <- dolcetto[dolcetto$`Annotated Gene ID` %in% epifactors_main$GeneID,]
colnames(dmatches) <- c("Protospacer", "GeneSymbol", "GeneID")
dmatches$sgRNAType <- "gene_target"
dmatches$Source <- "Dolcetto"
dmatches$LibrarySubset <- "A"
dmatches$Transcript <- ""
unmatched <- epifactors_main[epifactors_main$GeneID %in% setdiff(epifactors_main$GeneID, dmatches$GeneID),2]
unmatched
epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main.csv", data.table = FALSE)
rownames(epifactors_main) <- epifactors_main$HGNC_symbol
dmatches <- dolcetto[dolcetto$`Annotated Gene ID` %in% epifactors_main$GeneID,]
colnames(dmatches) <- c("Protospacer", "GeneSymbol", "GeneID")
dmatches$sgRNAType <- "gene_target"
dmatches$Source <- "Dolcetto"
dmatches$LibrarySubset <- "A"
dmatches$Transcript <- ""
unmatched <- epifactors_main[epifactors_main$GeneID %in% setdiff(epifactors_main$GeneID, dmatches$GeneID),2]
unmatched
epifactors_main["MEN1",]
library(ggplot2)
library(stringr)
library(dplyr)
library(data.table)
epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main_v1.7.3.tsv", data.table = FALSE)
setwd("/Volumes/blainey_lab/Mo/projects/epigenetic_screens/github/iPS_CRISPRi_Screens")
epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main_v1.7.3.tsv", data.table = FALSE)
rownames(epifactors_main) <- epifactors_main$HGNC_symbol
dolcetto <- fread(file = "./epifactors_sgRNA_library/broadgpp-dolcetto-targets-seta.txt", data.table = FALSE)
hCRISPRi <- fread(file = "./epifactors_sgRNA_library/hCRISPRiv2.1_libraries.tsv", data.table = FALSE)
constant5 <- "AAGCAGTGGTATCAACGCAGAGTcgtctcgcacc"
constant3 <- "gtttagagacgCCTTTGGGTAAGCACACGTC"
dmatches <- dolcetto[dolcetto$`Annotated Gene ID` %in% epifactors_main$GeneID,]
colnames(dmatches) <- c("Protospacer", "GeneSymbol", "GeneID")
dmatches$sgRNAType <- "gene_target"
dmatches$Source <- "Dolcetto"
dmatches$LibrarySubset <- "A"
dmatches$Transcript <- ""
dmatches
unmatched <- epifactors_main[epifactors_main$GeneID %in% setdiff(epifactors_main$GeneID, dmatches$GeneID),2]
unmatched
setdiff(epifactors_main$GeneID, dmatches$GeneID)
hmatches <- hCRISPRi[hCRISPRi$gene %in% unmatched,]
hmatches
hmatches <- hmatches[hmatches$Sublibrary.half == "Top5",c("gene","transcript","protospacer.sequence","Sublibrary.half")]
hmatches <- hmatches[hmatches$`Sublibrary half` == "Top5",c("gene","transcript","protospacer sequence","Sublibrary half")]
hmatches
colnames(hmatches) <- c("GeneSymbol", "Transcript", "Protospacer", "LibrarySubset")
hmatches$sgRNAType <- "gene_target"
hmatches$Source <- "hCRISPRi-v2.1"
hmatches
epifactors_main[hmatches$GeneSymbol, "GeneID"]
hmatches$GeneID <- epifactors_main[hmatches$GeneSymbol, "GeneID"]
hmatches
nontarget_sgRNA <- fread(file = "./epifactors_sgRNA_library/non_targeting_sgRNAs_dolcetto.tsv", data.table = FALSE)
colnames(nontarget_sgRNA) <- c("GeneSymbol", "Protospacer")
nontarget_sgRNA$GeneID <- nontarget_sgRNA$GeneSymbol
nontarget_sgRNA$sgRNAType <- "non_targeting_control"
nontarget_sgRNA$Source <- "Dolcetto"
nontarget_sgRNA$LibrarySubset <- "A"
nontarget_sgRNA$Transcript <- ""
nontarget_sgRNA
epifactors_lib <- rbind(dmatches, hmatches, nontarget_sgRNA)
epifactors_lib
bsmbi <- "CGTCTC"
bsmbirc <- "GAGACG"
inds <- grepl(bsmbi, epifactors_lib$Protospacer, ignore.case = TRUE) | grepl(bsmbirc, epifactors_lib$Protospacer, ignore.case = TRUE)
epifactors_lib <- epifactors_lib[!inds,]
epifactors_lib$ContainsBsmBI <- "No"
epifactors_lib
table(epifactors_lib$ContainsBsmBI)
dim(epifactors_lib)
nontarget_sgRNA
nontarget_sgRNA <- fread(file = "./epifactors_sgRNA_library/non_targeting_sgRNAs_dolcetto.tsv", data.table = FALSE)
nontarget_sgRNA
nontarget_sgRNA <- fread(file = "./epifactors_sgRNA_library/non_targeting_sgRNAs_dolcetto.tsv", header = FALSE, data.table = FALSE)
nontarget_sgRNA
colnames(nontarget_sgRNA) <- c("GeneSymbol", "Protospacer")
nontarget_sgRNA$GeneID <- nontarget_sgRNA$GeneSymbol
nontarget_sgRNA$sgRNAType <- "non_targeting_control"
nontarget_sgRNA$Source <- "Dolcetto"
nontarget_sgRNA$LibrarySubset <- "A"
nontarget_sgRNA$Transcript <- ""
epifactors_lib <- rbind(dmatches, hmatches, nontarget_sgRNA)
dim(epifactors_lib)
epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main_v1.7.3.tsv", data.table = FALSE)
#epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main.csv", data.table = FALSE)
rownames(epifactors_main) <- epifactors_main$HGNC_symbol
dolcetto <- fread(file = "./epifactors_sgRNA_library/broadgpp-dolcetto-targets-seta.txt", data.table = FALSE)
hCRISPRi <- fread(file = "./epifactors_sgRNA_library/hCRISPRiv2.1_libraries.tsv", data.table = FALSE)
constant5 <- "AAGCAGTGGTATCAACGCAGAGTcgtctcgcacc"
constant3 <- "gtttagagacgCCTTTGGGTAAGCACACGTC"
dmatches <- dolcetto[dolcetto$`Annotated Gene ID` %in% epifactors_main$GeneID,]
colnames(dmatches) <- c("Protospacer", "GeneSymbol", "GeneID")
dmatches$sgRNAType <- "gene_target"
dmatches$Source <- "Dolcetto"
dmatches$LibrarySubset <- "A"
dmatches$Transcript <- ""
unmatched <- epifactors_main[epifactors_main$GeneID %in% setdiff(epifactors_main$GeneID, dmatches$GeneID),2]
hmatches <- hCRISPRi[hCRISPRi$gene %in% unmatched,]
hmatches <- hmatches[hmatches$`Sublibrary half` == "Top5",c("gene","transcript","protospacer sequence","Sublibrary half")]
colnames(hmatches) <- c("GeneSymbol", "Transcript", "Protospacer", "LibrarySubset")
hmatches$sgRNAType <- "gene_target"
hmatches$Source <- "hCRISPRi-v2.1"
hmatches$GeneID <- epifactors_main[hmatches$GeneSymbol, "GeneID"]
hmatches
dmatches
nontarget_sgRNA <- fread(file = "./epifactors_sgRNA_library/non_targeting_sgRNAs_dolcetto.tsv", header = FALSE, data.table = FALSE)
nontarget_sgRNA
dim(nontarget_sgRNA)
colnames(nontarget_sgRNA) <- c("GeneSymbol", "Protospacer")
nontarget_sgRNA$GeneID <- nontarget_sgRNA$GeneSymbol
nontarget_sgRNA$sgRNAType <- "non_targeting_control"
nontarget_sgRNA$Source <- "Dolcetto"
nontarget_sgRNA$LibrarySubset <- "A"
nontarget_sgRNA$Transcript <- ""
epifactors_lib <- rbind(dmatches, hmatches, nontarget_sgRNA)
dim(epifactors_lib)
epifactors_lib
bsmbi <- "CGTCTC"
bsmbirc <- "GAGACG"
inds <- grepl(bsmbi, epifactors_lib$Protospacer, ignore.case = TRUE) | grepl(bsmbirc, epifactors_lib$Protospacer, ignore.case = TRUE)
epifactors_lib <- epifactors_lib[!inds,]
epifactors_lib$ContainsBsmBI <- "No"
epifactors_lib$SynthesizedsgRNA <- epifactors_lib$Protospacer
notG <- substr(epifactors_lib$Protospacer, 1,1) != "G"
epifactors_lib$SynthesizedsgRNA[notG] <- paste("G", epifactors_lib$SynthesizedsgRNA[notG], sep = "")
epifactors_lib$OligoSequence <- paste(constant5, epifactors_lib$SynthesizedsgRNA, constant3, sep = "")
epifactors_lib$sgRNALength <- nchar(epifactors_lib$SynthesizedsgRNA)
epifactors_lib <- epifactors_lib[order(epifactors_lib$GeneSymbol),]
rownames(epifactors_lib) <- 1:dim(epifactors_lib)[1]
epifactors_lib$sgRNAID <- paste("EpiKDlib", epifactors_lib$GeneSymbol, rownames(epifactors_lib), sep = "_")
epifactors_lib <- epifactors_lib[, c("GeneSymbol", "GeneID", "Transcript", "sgRNAID", "Protospacer", "SynthesizedsgRNA", "OligoSequence", "sgRNALength", "sgRNAType", "Source", "LibrarySubset", "ContainsBsmBI")]
write.table(epifactors_lib, file = "./epifactors_sgRNA_library/EpiFactors_CRISPRi_lib_v3.tsv", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
dim(epifactors_lib)
library(ggplot2)
library(stringr)
library(dplyr)
library(data.table)
epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main_v1.7.3.tsv", data.table = FALSE)
rownames(epifactors_main) <- epifactors_main$HGNC_symbol
#import genome-wide CRISPRi libraries
dolcetto <- fread(file = "./epifactors_sgRNA_library/broadgpp-dolcetto-targets-seta.txt", data.table = FALSE)
hCRISPRi <- fread(file = "./epifactors_sgRNA_library/hCRISPRiv2.1_libraries.tsv", data.table = FALSE)
#specify 5' and 3' constant sequences for the oligo pool
constant5 <- "AAGCAGTGGTATCAACGCAGAGTcgtctcgcacc"
constant3 <- "gtttagagacgCCTTTGGGTAAGCACACGTC"
dmatches <- dolcetto[dolcetto$`Annotated Gene ID` %in% epifactors_main$GeneID,]
colnames(dmatches) <- c("Protospacer", "GeneSymbol", "GeneID")
dmatches$sgRNAType <- "gene_target"
dmatches$Source <- "Dolcetto"
dmatches$LibrarySubset <- "A"
dmatches$Transcript <- ""
dim(dmatches)
dim(epifactors_main)
unmatched <- epifactors_main[epifactors_main$GeneID %in% setdiff(epifactors_main$GeneID, dmatches$GeneID),2]
length(unmatched)
(720-12)*3
hmatches <- hCRISPRi[hCRISPRi$gene %in% unmatched,]
hmatches <- hmatches[hmatches$`Sublibrary half` == "Top5",c("gene","transcript","protospacer sequence","Sublibrary half")]
colnames(hmatches) <- c("GeneSymbol", "Transcript", "Protospacer", "LibrarySubset")
hmatches$sgRNAType <- "gene_target"
hmatches$Source <- "hCRISPRi-v2.1"
hmatches$GeneID <- epifactors_main[hmatches$GeneSymbol, "GeneID"]
hmatches
nontarget_sgRNA <- fread(file = "./epifactors_sgRNA_library/non_targeting_sgRNAs_dolcetto.tsv", header = FALSE, data.table = FALSE)
colnames(nontarget_sgRNA) <- c("GeneSymbol", "Protospacer")
nontarget_sgRNA$GeneID <- nontarget_sgRNA$GeneSymbol
nontarget_sgRNA$sgRNAType <- "non_targeting_control"
nontarget_sgRNA$Source <- "Dolcetto"
nontarget_sgRNA$LibrarySubset <- "A"
nontarget_sgRNA$Transcript <- ""
dim(nontarget_sgRNA)
dim(hmatches)
dim(dmatches)
2124+46+50
epifactors_lib <- rbind(dmatches, hmatches, nontarget_sgRNA)
dim(epifactors_lib)
bsmbi <- "CGTCTC"
bsmbirc <- "GAGACG"
inds <- grepl(bsmbi, epifactors_lib$Protospacer, ignore.case = TRUE) | grepl(bsmbirc, epifactors_lib$Protospacer, ignore.case = TRUE)
sum(inds)
epifactors_lib[inds]
epifactors_lib[inds,]
epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main_v1.7.3.tsv", data.table = FALSE)
rownames(epifactors_main) <- epifactors_main$HGNC_symbol
#import genome-wide CRISPRi libraries
dolcetto <- fread(file = "./epifactors_sgRNA_library/broadgpp-dolcetto-targets-seta.txt", data.table = FALSE)
hCRISPRi <- fread(file = "./epifactors_sgRNA_library/hCRISPRiv2.1_libraries.tsv", data.table = FALSE)
#specify 5' and 3' constant sequences for the oligo pool
constant5 <- "AAGCAGTGGTATCAACGCAGAGTcgtctcgcacc"
constant3 <- "gtttagagacgCCTTTGGGTAAGCACACGTC"
dmatches <- dolcetto[dolcetto$`Annotated Gene ID` %in% epifactors_main$GeneID,]
colnames(dmatches) <- c("sgRNA_Sequence", "Gene_Symbol", "GeneID")
dmatches$sgRNA_Type <- "gene_target"
dmatches$Source <- "Dolcetto"
dmatches$Library_Subset <- "A"
dmatches$Transcript <- ""
dmatches
unmatched <- epifactors_main[epifactors_main$GeneID %in% setdiff(epifactors_main$GeneID, dmatches$GeneID),2]
unmatched
hmatches <- hCRISPRi[hCRISPRi$gene %in% unmatched,]
hmatches <- hmatches[hmatches$`Sublibrary half` == "Top5",c("gene","transcript","protospacer sequence","Sublibrary half")]
colnames(hmatches) <- c("Gene_Symbol", "Transcript", "sgRNA_Sequence", "Library_Subset")
hmatches$sgRNA_Type <- "gene_target"
hmatches$Source <- "hCRISPRi-v2.1"
hmatches$GeneID <- epifactors_main[hmatches$Gene_Symbol, "GeneID"]
hmatches
nontarget_sgRNA <- fread(file = "./epifactors_sgRNA_library/non_targeting_sgRNAs_dolcetto.tsv", header = FALSE, data.table = FALSE)
colnames(nontarget_sgRNA) <- c("Gene_Symbol", "sgRNA_Sequence")
nontarget_sgRNA$GeneID <- nontarget_sgRNA$Gene_Symbol
nontarget_sgRNA$sgRNA_Type <- "non_targeting_control"
nontarget_sgRNA$Source <- "Dolcetto"
nontarget_sgRNA$Library_Subset <- "A"
nontarget_sgRNA$Transcript <- ""
epifactors_lib <- rbind(dmatches, hmatches, nontarget_sgRNA)
bsmbi <- "CGTCTC"
bsmbirc <- "GAGACG"
inds <- grepl(bsmbi, epifactors_lib$Protospacer, ignore.case = TRUE) | grepl(bsmbirc, epifactors_lib$Protospacer, ignore.case = TRUE)
epifactors_lib <- epifactors_lib[!inds,]
epifactors_lib$ContainsBsmBI <- "No"
bsmbi <- "CGTCTC"
bsmbirc <- "GAGACG"
inds <- grepl(bsmbi, epifactors_lib$sgRNA_Sequence, ignore.case = TRUE) | grepl(bsmbirc, epifactors_lib$sgRNA_Sequence, ignore.case = TRUE)
epifactors_lib <- epifactors_lib[!inds,]
epifactors_lib$ContainsBsmBI <- "No"
inds
epifactors_lib
epifactors_lib <- rbind(dmatches, hmatches, nontarget_sgRNA)
dmatches
hmatches
nontarget_sgRNA
epifactors_lib <- rbind(dmatches, hmatches, nontarget_sgRNA)
epifactors_lib
bsmbi <- "CGTCTC"
bsmbirc <- "GAGACG"
inds <- grepl(bsmbi, epifactors_lib$sgRNA_Sequence, ignore.case = TRUE) | grepl(bsmbirc, epifactors_lib$sgRNA_Sequence, ignore.case = TRUE)
inds
sum(inds)
epifactors_lib <- epifactors_lib[!inds,]
epifactors_lib$ContainsBsmBI <- "No"
epifactors_lib
dim
dim(epifactors_lib)
epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main_v1.7.3.tsv", data.table = FALSE)
rownames(epifactors_main) <- epifactors_main$HGNC_symbol
#import genome-wide CRISPRi libraries
dolcetto <- fread(file = "./epifactors_sgRNA_library/broadgpp-dolcetto-targets-seta.txt", data.table = FALSE)
hCRISPRi <- fread(file = "./epifactors_sgRNA_library/hCRISPRiv2.1_libraries.tsv", data.table = FALSE)
#specify 5' and 3' constant sequences for the oligo pool
constant5 <- "AAGCAGTGGTATCAACGCAGAGTcgtctcgcacc"
constant3 <- "gtttagagacgCCTTTGGGTAAGCACACGTC"
dmatches <- dolcetto[dolcetto$`Annotated Gene ID` %in% epifactors_main$GeneID,]
colnames(dmatches) <- c("sgRNA_Sequence", "Gene_Symbol", "GeneID")
dmatches$sgRNA_Type <- "gene_target"
dmatches$Source <- "Dolcetto"
dmatches$Library_Subset <- "A"
dmatches$Transcript <- ""
#next, extract sgRNAs from the hCRISPRi_v2.1 library for the genes that were not found in the Dolcetto library
unmatched <- epifactors_main[epifactors_main$GeneID %in% setdiff(epifactors_main$GeneID, dmatches$GeneID),2]
hmatches <- hCRISPRi[hCRISPRi$gene %in% unmatched,]
hmatches <- hmatches[hmatches$`Sublibrary half` == "Top5",c("gene","transcript","protospacer sequence","Sublibrary half")]
colnames(hmatches) <- c("Gene_Symbol", "Transcript", "sgRNA_Sequence", "Library_Subset")
hmatches$sgRNA_Type <- "gene_target"
hmatches$Source <- "hCRISPRi-v2.1"
hmatches$GeneID <- epifactors_main[hmatches$Gene_Symbol, "GeneID"]
#include non-targeting control sgRNAs
nontarget_sgRNA <- fread(file = "./epifactors_sgRNA_library/non_targeting_sgRNAs_dolcetto.tsv", header = FALSE, data.table = FALSE)
colnames(nontarget_sgRNA) <- c("Gene_Symbol", "sgRNA_Sequence")
nontarget_sgRNA$GeneID <- nontarget_sgRNA$Gene_Symbol
nontarget_sgRNA$sgRNA_Type <- "non_targeting_control"
nontarget_sgRNA$Source <- "Dolcetto"
nontarget_sgRNA$Library_Subset <- "A"
nontarget_sgRNA$Transcript <- ""
epifactors_lib <- rbind(dmatches, hmatches, nontarget_sgRNA)
dim(epifactors_lib)
bsmbi <- "CGTCTC"
bsmbirc <- "GAGACG"
inds <- grepl(bsmbi, epifactors_lib$sgRNA_Sequence, ignore.case = TRUE) | grepl(bsmbirc, epifactors_lib$sgRNA_Sequence, ignore.case = TRUE)
epifactors_lib <- epifactors_lib[!inds,]
epifactors_lib$Contains_BsmBI <- "No"
dim(epifactors_lib)
epifactors_lib$Synthesized_sgRNA <- epifactors_lib$sgRNA_Sequence
notG <- substr(epifactors_lib$sgRNA_Sequence, 1,1) != "G"
epifactors_lib$Synthesized_sgRNA[notG] <- paste("G", epifactors_lib$Synthesized_sgRNA[notG], sep = "")
epifactors_lib$Oligo_Sequence <- paste(constant5, epifactors_lib$Synthesized_sgRNA, constant3, sep = "")
epifactors_lib$sgRNA_Length <- nchar(epifactors_lib$Synthesized_sgRNA)
epifactors_lib <- epifactors_lib[order(epifactors_lib$Gene_Symbol),]
rownames(epifactors_lib) <- 1:dim(epifactors_lib)[1]
epifactors_lib$sgRNA_ID <- paste("EpiKDlib", epifactors_lib$Gene_Symbol, rownames(epifactors_lib), sep = "_")
epifactors_lib <- epifactors_lib[, c("Gene_Symbol", "GeneID", "Transcript", "sgRNA_ID", "sgRNA_Sequence", "Synthesized_sgRNA", "Oligo_Sequence", "sgRNA_Length", "sgRNA_Type", "Source", "Library_Subset", "Contains_BsmBI")]
write.table(epifactors_lib, file = "./epifactors_sgRNA_library/EpiFactors_CRISPRi_lib_v3.tsv", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
epifactors_main <- fread(file = "./epifactors_sgRNA_library/EpiGenes_main_v1.7.3.tsv", data.table = FALSE)
df.functions <- data.frame(Function = unlist(str_split(epifactors_main$Function, ", ")))
df.functions
df.function.counts <- aggregate(df.functions, list(Term = df.functions$Function), length)
df.function.counts
df.function.counts <- df.function.counts[-c(14),]
df.function.counts
ggdotchart(df.function.counts, x = "Term", y = "Function",
color = "#FC4E07",                                # Color by groups
#palette = c("#00AFBB"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
ylab = "Genes in Library",
xlab = "Function",
#title = "Epigenetic Library Functions",
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 6,                                 # Large dot size
label = round(df.function.counts$Function),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
library(ggpubr)
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
ggdotchart(df.function.counts, x = "Term", y = "Function",
color = "#FC4E07",                                # Color by groups
#palette = c("#00AFBB"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
ylab = "Genes in Library",
xlab = "Function",
#title = "Epigenetic Library Functions",
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 6,                                 # Large dot size
label = round(df.function.counts$Function),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
ggdotchart(df.function.counts, x = "Term", y = "Function",
color = "#FC4E07",
sorting = "descending",
add = "segments",
ylab = "Number of Genes in Library",
xlab = "Function",
rotate = TRUE,
dot.size = 6,
label = round(df.function.counts$Function),
font.label = list(color = "white", size = 9,
vjust = 0.5),
ggtheme = theme_pubr()
)
pdf("./epifactors_sgRNA_library/epifactors_crispri_library_epigenetic_functions_distribution.pdf", width = 6, height = 5, useDingbats = FALSE)
par(cex.main=0.8,mar=c(2,2,2,2))
ggdotchart(df.function.counts, x = "Term", y = "Function",
color = "#FC4E07",
sorting = "descending",
add = "segments",
ylab = "Number of Genes in Library",
xlab = "Function",
rotate = TRUE,
dot.size = 6,
label = round(df.function.counts$Function),
font.label = list(color = "white", size = 9,
vjust = 0.5),
ggtheme = theme_pubr()
)
dev.off()
ggdotchart(df.function.counts, x = "Term", y = "Function",
color = "#FC4E07",
sorting = "descending",
add = "segments",
ylab = "Number of Genes in Library",
xlab = "Function",
rotate = TRUE,
dot.size = 7,
label = round(df.function.counts$Function),
font.label = list(color = "white", size = 9,
vjust = 0.5),
ggtheme = theme_pubr()
)
pdf("./epifactors_sgRNA_library/epifactors_crispri_library_epigenetic_functions_distribution.pdf", width = 6, height = 5, useDingbats = FALSE)
par(cex.main=0.8,mar=c(2,2,2,2))
ggdotchart(df.function.counts, x = "Term", y = "Function",
color = "#FC4E07",
sorting = "descending",
add = "segments",
ylab = "Number of Genes in Library",
xlab = "Function",
rotate = TRUE,
dot.size = 7,
label = round(df.function.counts$Function),
font.label = list(color = "white", size = 9,
vjust = 0.5),
ggtheme = theme_pubr()
)
dev.off()
df.complexes <- fread(file = "./epifactors_sgRNA_library/EpiGenes_complexes_v1.7.3.tsv", data.table = FALSE)
complex.members <- str_split(df.complexes$UniProt_ID, ",")
df.complexes$counts <- as.numeric(lapply(complex.members, length))
data <- data.frame(individual = df.complexes$Complex_name, group = df.complexes$Group_name, value = df.complexes$counts)
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
pdf("./epifactors_sgRNA_library/epifactors_crispri_library_epigenetic_complexes_distribution.pdf", width = 8, height = 8)
par(cex.main=0.8,mar=c(2,2,2,2))
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 15, xend = start, yend = 15), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 10, xend = start, yend = 10), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 5, xend = start, yend = 5), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(5, 10, 15, 20), label = c("5", "10", "15", "20") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )
p
p
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 15, xend = start, yend = 15), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 10, xend = start, yend = 10), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 5, xend = start, yend = 5), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(5, 10, 15, 20), label = c("5", "10", "15", "20") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )
p
pdf("./epifactors_sgRNA_library/epifactors_crispri_library_epigenetic_complexes_distribution.pdf", width = 8, height = 8)
par(cex.main=0.8,mar=c(2,2,2,2))
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 15, xend = start, yend = 15), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 10, xend = start, yend = 10), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 5, xend = start, yend = 5), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(5, 10, 15, 20), label = c("5", "10", "15", "20") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )
p
dev.off()
